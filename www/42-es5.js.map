{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_4.entry.js"],"names":["VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","filter","v","Nav","hostRef","transInstr","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","gesture","setDisabled","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","assign","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","progressEnd","NavPop","pop","NavPush","toPush","NavSetRoot"],"mappings":"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","file":"42-es5.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement } from './chunk-84f6bf13.js';\nimport { b as config } from './chunk-1074393c.js';\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './chunk-94c4865f.js';\nimport { b as assert } from './chunk-c90aaa66.js';\nimport { a as attachComponent } from './chunk-00265c49.js';\nimport { l as lifecycle, t as transition, s as setPageHidden } from './chunk-7507b2b9.js';\n\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nconst matches = (view, id, params) => {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    const currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    const keysA = Object.keys(currentParams);\r\n    const keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    for (const key of keysA) {\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n    return pages.map(page => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(v => v !== null);\r\n};\n\nclass Nav {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.swipeGesture !== true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-ab1fb115.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign({}, commonOpts, { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign({}, commonOpts, { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.sbAni.progressEnd(shouldComplete, stepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n    static get style() { return \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; }\n}\n\nclass NavPop {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    pop() {\n        const nav = this.el.closest('ion-nav');\n        if (nav) {\n            nav.pop({ skipIfBusy: true });\n        }\n    }\n    get el() { return getElement(this); }\n}\n\nclass NavPush {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    push() {\n        const nav = this.el.closest('ion-nav');\n        const toPush = this.component;\n        if (nav && toPush !== undefined) {\n            nav.push(toPush, this.componentProps, { skipIfBusy: true });\n        }\n    }\n    get el() { return getElement(this); }\n}\n\nclass NavSetRoot {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    push() {\n        const nav = this.el.closest('ion-nav');\n        const toPush = this.component;\n        if (nav && toPush !== undefined) {\n            nav.setRoot(toPush, this.componentProps, { skipIfBusy: true });\n        }\n    }\n    get el() { return getElement(this); }\n}\n\nexport { Nav as ion_nav, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\n"]}